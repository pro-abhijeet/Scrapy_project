# -*- coding: utf-8 -*-
"""nulearn_updated_code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UowQaqKFshqViS3SVO7TqiIlY9O5V6tm
"""

import json
from urllib.request import Request
import scrapy
from scrapy.crawler import CrawlerProcess
import re
import datetime

class CoursespiderSpider(scrapy.Spider):
    name = 'nulearn'
    start_urls = ['https://www.nulearn.in/']

    def parse(self, response):
        url = 'https://www.nulearn.in/MainSite/retrieve/?id=all_course'
        yield scrapy.Request(url=url, callback=self.parse_url)
    
    def parse_url(self, response):
        data = response.json()
        for i in data:
            c = i['course_url']
            url = f'https://www.nulearn.in/courses/{c}'
            yield scrapy.Request(url=url, callback=self.parse_course)

    def parse_course(self,response):
        ##course title
        title = response.xpath('//h1[@class="course-page-name"]/text()').get()

        ## short description
        short_desc = response.xpath('//p[@class="course-banner-para"]/text()').get()
        
        ## features
        combine_features = response.xpath('//div[@class="course-icon-block"]').getall()

        dict1 = {}
        features = []
        institute = ''
        course_batch = ''
        course_date = ''
        course_duration = ''
        learning = ''
        masterclass = ''
        for i in range(len(combine_features)):       
            key = combine_features[i].split('\r')[2].replace('              <div>','').replace('</div>','')
            value = combine_features[i].split('\r')[1].replace('              <h4 class="course-banner-sub-lael">','').replace('</h4>','')
            dict1[f'{key}'] = f'{value}'
        features.append(dict1)


        for i in range(len(features)):
            feature1 = features[i]
            for key,value in feature1.items():
                if key == 'INSTITUTION' or key == 'INSTITUTE' or key == '':
                    institute = value
                str_duration = 'course duration'
                if key.lower() == str_duration:
                    course_duration = value
                if key=='BATCH' or key=='BATCH ':
                    course_batch = value
                if key == 'DATE OF COMMENCEMENT' or key == 'COMMENCEMENT DATE':
                    str_date = 'coming soon'
                    if value.lower() != str_date:
                        date_value = value.rstrip().replace(' ','-').replace(',','').replace('---','-').replace('--','-').replace('th','').replace('st','').replace('nd','').replace('1-Feb-2020','1-February-2020').replace('Augu','August')
                        course_date = date_value
                        if re.match(r'^[0-9]', date_value):
                            date = datetime.datetime.strptime(date_value, '%d-%B-%Y')
                            course_date = date
                        elif re.match(r'^[a-zA-Z]', date_value):
                            date = datetime.datetime.strptime(date_value, '%B-%d-%Y')
                            course_date = date
                    else:
                        course_date = value
                if key == 'ONLINE SESSIONS &amp; CAMPUS VISITS' or key == 'ONLINE SESSIONS &amp; CAMPUS VISIT':
                    learning = value
                if value == 'Masterclass':
                    masterclass = key


        ## description
        description = response.xpath('//div[@class="course-detail-container about-course-con"]/p[1]').get().replace('<strong>','').replace('</strong>','')

        ## objective
        objectives = ''
        objective = response.xpath('//div[@class="course-detail-container about-course-con"]/ul/li/text()').getall()
        objectives = '|'.join(objective)


        target_stud = response.xpath('//div[@class="course-detail-container"]/ul/li/text()').getall()
        target_students = '|'.join(target_stud)

        if target_students == '':
            target_stud = response.xpath('//div[@class="course-detail-container"]/ul/li/p/text()').getall()
            target_students = '|'.join(target_stud)

        
        ## eligibility
        eligibility = response.xpath('//div[@class="eligibility-block-wrapper"]/ul/li/text()').getall()
        eligible = ''
        if eligibility != []:
            eligible = "|".join(eligibility)
        else:
            eligible = ''

        ## assesment
        assesment = response.xpath('//div[@class="eilg-block-container"][2]//p/text()').get() 
        
        if assesment:
            assesments = assesment.replace('.','<p>')
        else:
            assesments = ''
        ## price
        fees = response.xpath('//div[@class="fee-stru-line"]/h2[1]/text()').get()

        ## installment - no. of installments, date, amount
        installments = response.xpath('//div[@class="instalment-wchedule-wrapper"][1]//div[@class="instalment-row-wrapper" and position()>1]/div[1]/div/text()').getall()
        total_installments = "|".join(installments)
        
        dates_install = response.xpath('//div[@class="instalment-wchedule-wrapper"][1]//div[@class="instalment-row-wrapper" and position()>1]/div[2]/div/text()').getall()
        installment_dates = "|".join(dates_install)
        
        amount_install = response.xpath('//div[@class="instalment-wchedule-wrapper"][1]//div[@class="instalment-row-wrapper" and position()>1]/div[3]/div/text()').getall()
        installment_amount = "|".join(amount_install)

        ## instructor details- name, degree, description, image 
        instructor_img = response.xpath('//div[@class="mentor-slide-wrapper"]/img[@src]').getall()
        instructor_image = '|'.join(instructor_img)

        instructor_name = response.xpath('//div[@class="mentor-slide-wrapper"]/div[1]/text()').getall()
        instructor_names = '|'.join(instructor_name)

        instructor_deg = response.xpath('//div[@class="mentor-slide-wrapper"]/div[2]/text()').getall()
        instructor_degree = '|'.join(instructor_deg)

        instructor_desc = response.xpath('//div[@class="mentor-slide-wrapper"]/button[@fac_desc]').getall()
        instruct_desc_list = []
        for i in instructor_desc:
            re_desc = re.findall('fac_desc=\".*" i',i)
            desc = re_desc[0].replace('fac_desc=\"','"').replace(' i','')
            instruct_desc_list.append(desc)
        instructor_description = '|'.join(instruct_desc_list)


        ## reviews and reviewer details
        test_name = response.xpath('//div[@class="success-story-block"]/p[1]/text()').getall()
        testimonial_name = ''
        t_name = []
        for j in test_name:
            s = ''
            if j in t_name:
                continue
            else:
                t_name.append(j)
        testimonial_name = '|'.join(t_name)
        t_name = []

        test_desig = response.xpath('//div[@class="success-story-block"]/p[2]/text()').getall()
        t_desig = []
        testimonial_designation = ''
        for j in test_desig:
            s = ''
            if j in t_desig:
                continue
            else:
                t_desig.append(j)
        testimonial_designation = '|'.join(t_desig)
        t_desig = []

        test_desc = response.xpath('//div[@class="success-story-block"]/p[3]/text()').getall()
        testimonial_description = ''
        t_desc = []
        for j in test_desc:
            s = ''
            if j in t_desc:
                continue
            else:
                desc = re.sub(r"\s*",'',j)
                t_desc.append(desc)
        testimonial_description = '|'.join(t_desc)
        t_desc = []

        ## curriculum
        mods = response.xpath('//div[@class="sullabus-tab-book-wrapper"]//h4/text()').getall()
        modules = []
        for i in mods:
            mod = re.sub(r"[a-zA-Z]+\s[0-9]",'',i).replace('\u2013','')
            modules.append(mod)
            
        
        submods = response.xpath('//div[@class="sullabus-tab-book-wrapper"]//ul').getall()

        submodule = []
        if submods != []:
            subm = []
            for j in range(len(submods)): 
                text1 = submods[j].replace('                ','').replace('              ','').replace("\r",'').replace('<li class=\"syllabus-list-iitem\">','')
                o_tag2 = 'ul class="syllabus-list"'
                c_tag2 = 'ul'
                r_text2 = '<' + o_tag2 + '>(.*?)</' + c_tag2 + '>'
                sub = re.findall(r_text2,text1)
                subm.append(''.join(sub))
            submodule.append('|'.join(subm))
        else:
            submodule.append('')

        s1 = '<?xml version="1.0"?><mainmodule>' 
        s2 = '</mainmodule>'
        module_list = ''
        f = ''
        f1 = ''
        for i,j,c in zip(modules,range(len(submodule[0].split('|'))),range(1, len(modules)+1)):
            m = f'<heading>{i}</heading><subheading>'
            i1 = ''
            for l in range(1,len(submodule[0].split('|')[0].split('</li>'))+1):
                if submodule[0].split('|')[0].split('</li>')[l-1] == '':
                    continue
                else:
                    i = f"<item{l}>{submodule[0].split('|')[0].split('</li>')[l-1]}</item{l}>"
                    i1 += i
            s = ''
            s += f'<module{c}>' + m + i1 + '</subheading>' + f'</module{c}>'
            f += s
        f1 = s1 + f + s2
        module_list = f1


        yield{
            'title' : title,
            'institute' : institute,
            'short_desc' : short_desc,
            'description'  :description,
            'objective' : objectives,
            'target_students' : target_students,
            'total_duration' : course_duration,
            'start_date' : course_date,
            'batch' : course_batch,
            'learn_type' : learning,
            'masterclass' : masterclass,
            'eligibility' : eligible,
            'assesment' : assesments,
            'content_module' : module_list,
            'regular_price' : fees,
            'installments' : total_installments,
            'installment_date' : installment_dates,
            'installment_amount' : installment_amount,
            'instructor_name' : instructor_names,
            'instructor_degree' : instructor_degree,
            'instructor_desc' : instructor_description,
            'instructor_image' : instructor_image,
            'reviewer_name' : testimonial_name,
            'reviewer_design'  :testimonial_designation,
            'reviewer_review' : testimonial_description
            
        }