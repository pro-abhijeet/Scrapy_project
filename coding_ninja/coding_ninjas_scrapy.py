# -*- coding: utf-8 -*-
"""Coding Ninjas_scrapy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ACuHC6M1cAMR3BCO4lb_cus6kKzM3R5V
"""

import imp
import scrapy
from scrapy_playwright.page import PageCoroutine
from scrapy.crawler import CrawlerProcess
import json

class MainSpider(scrapy.Spider):
    name = 'main'
    start_urls = ['https://www.codingninjas.com/']
    headers = {
        "Accept" : "application/json",
        "Referer" : "https://www.codingninjas.com/",
        "sec-ch-ua" : '"Google Chrome";v="105", "Not)A;Brand";v="8", "Chromium";v="105"',
        "sec-ch-ua-mobile" : "?0",
        "sec-ch-ua-platform" : "Windows",
        "User-Agent" : "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36"
    }
    
    def parse(self, response):
        link = 'https://api.codingninjas.com/api/v4/course/courses_info'
        yield scrapy.Request(url=link, callback=self.parse_main, headers=self.headers)

    def parse_main(self, response):
        data = response.json()
        course_list = []
        for category in data['data']['course_categories']:
            for sub_category in category['course_sub_categories']:
                for title in sub_category['courses']:
                    url1 = f"https://api.codingninjas.com/api/v4/course/course_plans?title={title['online_title']}&marketing_token=03ad65c9c928411475414dd0ad8720be&ab_test_groups='"
                    url2 = f"https://api.codingninjas.com/api/v4/course/course_data?title={title['online_title']}"
                    yield scrapy.Request(url = url2, callback=self.parse_info, headers=self.headers)
                    yield scrapy.Request(url=url1, callback=self.parse_page, headers=self.headers)
                    
            
    def parse_info(self, response):
        data1 = response.json()
        d = data1['data']
        faq_ques = ''
        faq_description = ''
        for i in data1['data']['course_data']['faqs']:
            faq_ques += i['faq_title']
            faq_ques += '|'
            
            faq_description += [i['faq_description']][0]
            faq_description += '|'

        course_title = ''
        course_title = data1['data']['course_data']['intro_section']['course_title']

        short_desc = ''
        if 'short_sub_heading' in data1['data']['course_data']['intro_section']:
            short_desc = data1['data']['course_data']['intro_section']['short_sub_heading']
        else:
            short_desc = data1['data']['course_data']['intro_section']['heading_metadata']

        duration = ''
        duration = data1['data']['course_data']['intro_section']['course_metrics']['duration'] + ' months'

        problems = ''
        projects = ''
        try:
            projects = data1['data']['course_data']['intro_section']['course_metrics']['projects_count']
        except:
            try:
                problems = data1['data']['course_data']['intro_section']['course_metrics']['problems']
            except:
                problems = data1['data']['course_data']['intro_section']['course_metrics']['problem_count']
        
        rating = ''
        rating = data1['data']['course_data']['intro_section']['course_metrics']['course_rating']

        video_length = ''
        video_length = data1['data']['course_data']['intro_section']['course_metrics']['video_content_length'] + 'hrs'

        stud_enrolled = ''
        stud_enrolled = data1['data']['course_data']['intro_section']['course_metrics']['students_enrolled']

        fac_name = ''
        fac_designation = ''
        fac_image = ''
        for i in data1['data']['course_data']['support_system']['faculty']:
            fac_name += i['name']
            fac_name += '|'

            fac_designation += i['designation']
            fac_designation += '|'

            fac_image += i['image_link']
            fac_image += ' | ' 

        placements = ''
        if 'placement' or 'placement assistance' in data1['data']:
            placements = 'True'
        else:
            placements = 'False'

        modules = []
        for i in data1['data']['course_data']['course_curriculum']['tab_data']:
            if i['title'] != 'Special Features':
                modules.append(i['title'])
        
        sub_mod = []
        l = []
        for i in data1['data']['course_data']['course_curriculum']['tab_data']:
            for m in modules:
                if i['title'] == m:
                    for c in i['sections']:
                        l.append(c['section_title'])
                    sub_mod.append(l)
                    l = []
        s1 = '<?xml version="1.0"?><mainmodule>' 
        s2 = '</mainmodule>'
        module_list = ''
        f = ''
        f1 = ''
        for i,j in zip(range(1,len(modules)+1), range(len(sub_mod))):
            m = f'<heading>{modules[i-1]}</heading><subheading>'
            i1 = ''
            for k in range(1,len(sub_mod[j])+1):
                s = f"<item{k}>{sub_mod[j][k-1]}</item{k}>"
                i1 += s
            s = ''
            s += f"<module{i}>" + m + i1 + '</subheading>' + f'</module{i}>'
            f += s
        module_list = s1 + f +s2

        student_name = ''
        student_review = ''
        for i in data1['data']['course_data']['testimonials']:
            student_name += i['name'] + '|'
           
            student_review = i['review'] + '|'
        

        yield{
            # 'd' : d
            'title' : course_title,
            'short_description' : short_desc,
            'total_duration' : duration,
            'projects' : projects,
            'problems' : problems,
            'rating' : rating,
            'video_length' : video_length,
            'students_enrolled' : stud_enrolled,
            'content_module' : module_list,
            'instructor_name' : fac_name,
            'instructor_designation' : fac_designation,
            'instructor_image' : fac_image,
            'reviewer_name' : student_name,
            'reviewer_review': student_review,
            'placements' : placements,
            'faq_question' : faq_ques,
            'faq_description' : faq_description
        }


    def parse_page(self, response):
        data = response.json()
        d1 = data['data']
        fees = ''
        date = ''
        try:
            for i in data['data']['course_products_groups'][0]['small_course_products_map']['english']['earliest_batches']:
                fees = i['fees_with_tax']
        except:
            for i in data['data']['course_products_groups'][0]['small_course_products_map']['hinglish']['earliest_batches']:
                fees = i['fees_with_tax']
        try:
            for i in data['data']['course_products_groups'][0]['small_course_products_map']['english']['highest_discount_batches']:
                date = i['start_date']
        except:
            pass     
        
        features = ''
        for i in data['data']['course_products_groups'][0]['metadata']['special_features']:
            if i['covered'] == True:
                features += i['alt']
                features += '|'
        
        yield{
            # 'd1' : d1
            'price' : fees,
            'start_date' : date,
            'features' : features
        }